# ==========================================
# AI SVN代码审查工具 - 用户映射示例文件
# ==========================================
# 请根据您的团队配置修改以下映射，并重命名为 user_mapping.yaml

# SVN用户名到钉钉用户ID的映射
# 格式：svn_username: dingtalk_mobile_or_userid
# 支持三种格式的钉钉标识：
# 1. 手机号: "13800138000"
# 2. @+手机号: "@13800138000" 
# 3. 钉钉用户ID: "19a-rlep5kn831"
user_mapping:
  # 开发人员示例
  "your_svn_username": "your_mobile_number"    # 替换为您的SVN用户名和手机号
  "john.doe": "13800138000"                    # 示例：使用手机号
  "jane.smith": "@13900139000"                 # 示例：使用@+手机号格式
  "developer1": "19a-rlep5kn831"               # 示例：使用钉钉用户ID
  "zhang.san": "13600136000"                   # 示例：中文名对应的拼音
  "li.si": "13700137000"                       # 示例：中文名对应的拼音
  
  # 项目负责人示例
  "project.manager": "13500135000"             # 项目经理
  "tech.lead": "13400134000"                   # 技术负责人
  "senior.dev": "13300133000"                  # 高级开发
  
  # 不同团队成员示例
  "frontend.dev1": "13200132000"               # 前端开发1
  "frontend.dev2": "13100131000"               # 前端开发2
  "backend.dev1": "13000130000"                # 后端开发1
  "backend.dev2": "12900129000"                # 后端开发2
  "ui.designer": "12800128000"                 # UI设计师
  "qa.tester": "12700127000"                   # 测试工程师
  "devops.engineer": "12600126000"             # 运维工程师

# 默认审查者（当找不到SVN用户映射时通知的人）
# 建议配置团队负责人或项目经理
default_reviewer:
  - "your_svn_username"        # 替换为您的SVN用户名
  - "your_mobile_number"       # 替换为您的手机号
  # 多个默认审查者示例：
  # - "project.manager"
  # - "tech.lead"
  # - "13500135000"

# 特殊路径的审查者映射
# 当特定路径的代码发生变更时，会额外通知对应的审查者
path_reviewers:
  # 前端代码路径
  "/trunk/src/frontend": 
    - "frontend.dev1"
    - "frontend.dev2"
    - "ui.designer"
  "/trunk/Assets/Scripts/UI":     # Unity UI脚本
    - "frontend.dev1"
    - "ui.designer"
  
  # 后端代码路径
  "/trunk/src/backend":
    - "backend.dev1"
    - "backend.dev2"
    - "tech.lead"
  "/trunk/src/api":
    - "backend.dev1"
    - "tech.lead"
  
  # 数据库相关
  "/trunk/database":
    - "backend.dev1"
    - "devops.engineer"
    - "tech.lead"
  "/trunk/sql":
    - "backend.dev1"
    - "devops.engineer"
  
  # 配置文件
  "/trunk/config":
    - "devops.engineer"
    - "tech.lead"
    - "project.manager"
  "/trunk/src/config":
    - "devops.engineer"
    - "tech.lead"
  
  # Unity项目特定路径
  "/trunk/Assets/Scripts/Core":   # 核心逻辑
    - "tech.lead"
    - "senior.dev"
  "/trunk/Assets/Scripts/Network": # 网络模块
    - "backend.dev1"
    - "tech.lead"
  "/trunk/Assets/Plugins":        # 插件目录
    - "tech.lead"
    - "devops.engineer"
  
  # Web项目特定路径
  "/trunk/frontend/src/components": # React/Vue组件
    - "frontend.dev1"
    - "frontend.dev2"
  "/trunk/backend/routes":          # 路由配置
    - "backend.dev1"
    - "tech.lead"
  "/trunk/backend/models":          # 数据模型
    - "backend.dev1"
    - "backend.dev2"
  
  # 文档相关
  "/trunk/docs":
    - "tech.lead"
    - "project.manager"
    - "qa.tester"

# 团队通知配置
team_notifications:
  # 重要文件变更时通知整个团队
  # 支持通配符模式匹配
  important_files:
    # 配置文件
    - "*/config/*"
    - "*/settings/*"
    - "*/.env*"
    - "*/package.json"
    - "*/requirements.txt"
    - "*/Pipfile"
    - "*/composer.json"
    
    # 数据库相关
    - "*/database/*"
    - "*/migrations/*"
    - "*/sql/*"
    - "*.sql"
    
    # 安全相关
    - "*/security/*"
    - "*/auth/*"
    - "*/permissions/*"
    - "*/.htaccess"
    
    # 构建和部署
    - "*/docker*"
    - "*/Dockerfile*"
    - "*/docker-compose*"
    - "*/ci/*"
    - "*/deploy/*"
    - "*/.github/*"
    - "*/.gitlab-ci.yml"
    - "*/jenkins*"
    
    # Unity项目关键文件
    - "*/ProjectSettings/*"
    - "*/Assets/Plugins/*"
    - "*/Assets/StreamingAssets/*"
    
    # Web项目关键文件
    - "*/webpack*"
    - "*/babel*"
    - "*/tsconfig*"
    - "*/vite*"
    - "*/rollup*"
  
  # 关键分支变更通知（支持通配符）
  critical_branches:
    - "/trunk"                    # 主干
    - "/branches/release/*"       # 发布分支
    - "/branches/hotfix/*"        # 热修复分支
    - "/branches/master"          # 主分支
    - "/branches/main"            # 主分支（新命名）
    - "/branches/production"      # 生产分支
    - "/branches/staging"         # 预发布分支

# ==========================================
# 配置指南和最佳实践
# ==========================================

# 1. 获取钉钉用户信息:
#    方法1: 在钉钉群中@该用户，查看用户资料获取手机号
#    方法2: 使用钉钉开发者工具获取用户ID
#    方法3: 询问用户绑定钉钉的手机号
#
# 2. SVN用户名获取:
#    运行命令: svn log --limit 10 [repository_url]
#    查看最近提交的作者信息
#
# 3. 测试用户映射:
#    运行工具后观察钉钉通知是否正确发送给对应用户
#    检查日志文件中的用户映射信息
#
# 4. 团队配置建议:
#    👥 小团队(5人以下): 配置简单的user_mapping即可
#    🏢 中等团队(5-20人): 建议配置path_reviewers进行分工
#    🏭 大型团队(20人以上): 全面配置所有选项，细化权限
#
# 5. 路径匹配规则:
#    - 支持精确匹配: "/trunk/src/frontend"
#    - 支持通配符: "/trunk/src/*", "*/config/*"
#    - 路径不区分大小写
#    - 优先匹配更具体的路径
#
# 6. 通知策略优化:
#    🔕 减少噪音: 精确配置path_reviewers，避免无关通知
#    ⚡ 关键通知: 配置important_files确保重要变更不被遗漏
#    👥 团队协作: 合理使用default_reviewer作为兜底机制
#
# 7. 项目类型配置模板:
#    
#    📱 Unity项目:
#    - 重点关注Assets/Scripts路径
#    - 配置UI、网络、核心逻辑等模块的专门审查者
#    - 重要文件包含ProjectSettings和Plugins
#    
#    🌐 Web项目:
#    - 前后端分离配置path_reviewers
#    - 重要文件包含package.json、webpack等构建配置
#    - 数据库模型和API路由需要特别关注
#    
#    🖥️ 后端项目:
#    - 重点配置API、数据库、配置文件的审查者
#    - 关注依赖文件(requirements.txt等)变更
#    - 部署相关文件需要运维人员参与审查
#
# 配置完成后，建议先进行小范围测试，确认通知正常发送
